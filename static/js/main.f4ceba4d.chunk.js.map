{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ListItem","props","className","item","onClick","compTask","itemNumber","removeTask","App","useState","task","updateTask","taskArr","updateTaskArr","index","compArr","delArr","splice","isDisabled","onSubmit","event","floatArr","preventDefault","push","type","name","value","onChange","val","target","autoComplete","placeholder","disabled","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAmDMA,G,MAAW,SAACC,GAChB,OACE,sBAAKC,UAAU,WAAf,UACE,oBAAIA,UAAU,WAAd,SAA0BD,EAAME,OAChC,sBAAKD,UAAU,iBAAf,UACA,wBAAQA,UAAU,aAAaE,QAAS,WAAOH,EAAMI,SAASJ,EAAMK,aAApE,uBACA,wBAAQJ,UAAU,eAAeE,QAAS,WAAOH,EAAMM,WAAWN,EAAMK,aAAxE,iCAMSE,EA7DH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACVC,EADU,KACJC,EADI,OAEgBF,mBAAS,IAFzB,mBAEVG,EAFU,KAEDC,EAFC,KAiBVR,EAAW,SAACS,GAChB,IAAIC,EAAO,YAAOH,GAClBG,EAAQD,IAAU,UAClBD,EAAcE,IAGVR,EAAa,SAACO,GAClB,IAAIE,EAAM,YAAOJ,GACjBI,EAAOC,OAAOH,EAAO,GACrBD,EAAcG,IAIZE,EAAsB,KAATR,EACjB,OACE,sBAAKR,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,SACE,uBAAMiB,SAzBS,SAACC,GACpB,IAAIC,EAAQ,YAAOT,GACnBQ,EAAME,iBACND,EAASE,KAAKb,GACdG,EAAcQ,GACdV,EAAW,KAoBuBT,UAAU,YAAxC,UACE,uBAAOA,UAAU,WAAWsB,KAAK,OAAOC,KAAK,OAAOC,MAAOhB,EAAMiB,SA/BtD,SAACP,GAClB,IAAIQ,EAAMR,EAAMS,OAAOH,MACvBf,EAAWiB,IA6BkFE,aAAa,MAAMC,YAAY,WACtH,wBAAQ7B,UAAU,SAASsB,KAAK,SAASQ,SAAUd,EAAnD,yBAGJ,qBAAKhB,UAAU,WAAf,SACGU,EAAQqB,KAAI,SAAC9B,EAAMW,GAClB,OAAO,cAAC,EAAD,CAAsBT,SAAUA,EAAUE,WAAYA,EAAYD,WAAYQ,EAAOX,KAAMA,GAA5EW,YC/BjBoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f4ceba4d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nconst App = () => {\n const [task, updateTask] = useState(\"\")\n const [taskArr, updateTaskArr] = useState([])\n\n  const taskUpdate = (event) => {\n    let val = event.target.value;\n    updateTask(val)\n  }\n\n  const handleSubmit = (event) => {\n    let floatArr = [...taskArr];\n    event.preventDefault()\n    floatArr.push(task);\n    updateTaskArr(floatArr)\n    updateTask(\"\")\n  }\n\n  const compTask = (index) => {\n    let compArr = [...taskArr];\n    compArr[index] += \" âœ”\"\n    updateTaskArr(compArr)\n  }\n\n  const removeTask = (index) => {\n    let delArr = [...taskArr];\n    delArr.splice(index, 1);\n    updateTaskArr(delArr);\n  }\n\n \n  let isDisabled = task === \"\"\n  return (\n    <div className=\"App\">\n      <div className=\"inputs\">\n        <form onSubmit={handleSubmit} className=\"inputForm\">\n          <input className=\"inputBox\" type=\"text\" name=\"task\" value={task} onChange={taskUpdate} autoComplete=\"off\" placeholder=\"To-Do!\"/>\n          <button className=\"submit\" type=\"submit\" disabled={isDisabled}>Submit</button>\n        </form>\n      </div>\n      <div className=\"todoList\">\n        {taskArr.map((item, index) => {\n          return <ListItem key={index} compTask={compTask} removeTask={removeTask} itemNumber={index} item={item}/>\n        })}\n      </div>\n    </div>\n  );\n  \n}\n\nconst ListItem = (props) => {\n  return(\n    <div className=\"todoItem\">\n      <h2 className=\"taskItem\">{props.item}</h2>\n      <div className=\"controlButtons\">\n      <button className=\"compButton\" onClick={() => {props.compTask(props.itemNumber)}}>Completed</button>\n      <button className=\"removeButton\" onClick={() => {props.removeTask(props.itemNumber)}}>Remove Task</button>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}